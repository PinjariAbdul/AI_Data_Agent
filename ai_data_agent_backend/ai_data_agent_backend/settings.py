"""
Django settings for ai_data_agent_backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gke*n1)#d-@z!c&=@7593)!7sz12nr9*%r&y535em^pjy##1gn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'api',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ai_data_agent_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ai_data_agent_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
}

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB

# Media files (uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'uploads'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_ALL_ORIGINS = True  # Only for development

# OpenAI API Key Configuration
# Load from environment variable (.env file)
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Free AI API Keys
HUGGINGFACE_TOKEN = os.getenv('HUGGINGFACE_TOKEN')
TOGETHER_API_KEY = os.getenv('TOGETHER_API_KEY')
GROQ_API_KEY = os.getenv('GROQ_API_KEY')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')

# Primary AI Provider Configuration
PRIMARY_AI_PROVIDER = 'groq'  # Set Groq as primary provider

# Debug: Print API key status for troubleshooting
if GROQ_API_KEY:
    print(f"üöÄ Groq API Key loaded: {GROQ_API_KEY[:10]}...{GROQ_API_KEY[-10:]}")
    print("‚úÖ Primary AI Provider: Groq (Fast & Free)")
elif OPENAI_API_KEY:
    print(f"‚úÖ OpenAI API Key loaded: {OPENAI_API_KEY[:10]}...{OPENAI_API_KEY[-10:]}")
    print("‚ö†Ô∏è Primary AI Provider: OpenAI (Paid)")
else:
    print("‚ùå No API keys found")
    print(f"üìÅ Current .env file path should be: {BASE_DIR / '.env'}")
    print("üí° Get free Groq API key at: https://console.groq.com/keys")

# Log available free alternatives
free_services = []
if GROQ_API_KEY: free_services.append('Groq')
if HUGGINGFACE_TOKEN: free_services.append('Hugging Face')
if TOGETHER_API_KEY: free_services.append('Together AI')
if GOOGLE_API_KEY: free_services.append('Google Gemini')

if free_services:
    print(f"üÜì Free AI services available: {', '.join(free_services)}")
else:
    print("üíª Will use offline AI system (no external APIs needed)")

# AI Configuration
AI_CONFIG = {
    'PRIMARY_PROVIDER': PRIMARY_AI_PROVIDER,
    'GROQ_API_KEY': GROQ_API_KEY,
    'OPENAI_API_KEY': OPENAI_API_KEY,
    'FALLBACK_TO_OFFLINE': True,
    'PREFERRED_ORDER': ['groq', 'together', 'google', 'huggingface', 'openai', 'offline']
}
